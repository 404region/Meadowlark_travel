QA: стоит ли оно того?
QA может обойтись недешево — иногда весьма недешево. Так стоит ли овчинка выделки? Это непростая формула со многими входными параметрами. Большинство предприятий работают по какой-либо схеме окупаемости инвестиций. Если вы тратите деньги, то ожидаете получить обратно как минимум столько же (желательно больше). С QA, однако, это соотношение может быть неочевидным. Хорошо зарекомендовавшему себя солидному продукту проблемы с качеством могут сходить с рук дольше, чем новому, никому не известному проекту. Безусловно, никто не хочет производить заведомо низкокачественный продукт, но давление обстоятельств в сфере технологий весьма высоко. Время выхода на рынок может быть критическим, и иногда лучше выйти на рынок с чем-то не совсем идеальным, чем с идеальным, но спустя два месяца. В веб-разработке качество может рассматриваться в четырех аспектах.  Охват. Охват означает степень проникновения на рынок вашего продукта — количество людей, просматривающих ваш сайт или использующих ваш сервис. Существует прямая корреляция между охватом и доходностью: чем больше посетителей на сайте, тем больше людей покупает продукт или сервис. С точки зрения разработки оптимизация поисковых систем (SEO) в наибольшей степени влияет на охват, поэтому мы включим SEO в план по обеспечению качества.  Функциональность. Если люди посещают ваш сайт или используют ваш сервис, качество функциональности вашего сайта будет иметь большое влияние на удержание пользователей: сайт, работающий так, как утверждает его реклама, с большей вероятностью привлечет повторных посетителей, чем работающий хуже.  Удобство использования. В то время как функциональность связана с правильностью работы, удобство использования относится к оценке человеко-компьютерного взаимодействия (�uman-computer interaction, HCI). Основной вопрос здесь: «Подходит ли способ предоставления функциональности для целевой аудитории?» Этот вопрос часто интерпретируется как «Удобно ли это использовать?», хотя погоня за удобством часто может вредить гибкости или производительности: кажущееся удобным программисту, может не быть таковым для 
65Логика и визуализация
потребителя, не имеющего соответствующего уровня подготовки и технических знаний. Другими словами, при оценке удобства использования вам нужно учитывать целевую аудиторию. Поскольку главным источником информации для измерения удобства использования является пользователь, оно обычно не поддается автоматизации. Как бы то ни было, пользовательское тестирование должно быть включено в план по обеспечению качества.  Эстетика. Эстетика — наиболее субъективный из четырех аспектов и поэтому в наименьшей степени относящийся к разработке. Когда дело доходит до эстетичности сайта, проблем, касающихся непосредственно разработки, возникает немного. Тем не менее регулярный анализ эстетичности сайта должен входить в план по обеспечению качества. Покажите сайт достаточно репрезентативной пробной аудитории и выясните, не кажется ли он им устаревшим и вызывает ли у них желаемую реакцию. Помните, что эстетика зависит от времени (эстетические стандарты меняются с течением времени) и аудитории (привлекательное для одних людей может быть совершенно неинтересно для других). Хотя все четыре аспекта должны быть представлены в вашем плане по обеспечению качества, автоматизированно во время разработки можно выполнить только функциональное тестирование и тестирование SEO, поэтому именно на них мы сосредоточимся в этой главе.
Логика и визуализация
Вообще говоря, в вашем сайте есть два «царства»: логика (часто называемая бизнеслогикой — это термин, которого я избегаю по причине его коммерческого уклона) и визуализация. Вы можете рассматривать логику вашего сайта как существующую в своего рода чисто интеллектуальной области. Например, на нашем сайте Meadow�ark Trave� может быть принято правило, по которому для аренды мотороллера клиент обязан иметь действующие водительские права. Это очень простое в смысле баз данных правило: при каждом предварительном заказе мотороллера пользователю необходим номер действующих водительских прав. Визуализация этого отделена от логики. Возможно, пользователь должен просто установить флажок на итоговой форме заказа или указать номер действующих водительских прав, который будет проверен Meadow�ark Trave�. Это важное отличие, поскольку в логической области все должно быть так просто и ясно, как только возможно, тогда как визуализация может быть настолько сложной (или простой), как это необходимо. Визуализация относится к вопросам удобства использования и эстетики, в то время как область бизнес-логики — нет. Везде, где только возможно, вы должны четко разделять логику и визуализацию. Существует много способов сделать это, в данной книге мы сосредоточимся на инкапсуляции логики в модулях JavaScript. В то же время визуализация будет сочетанием HTML, CSS, мультимедиа, JavaScript и библиотек клиентской части, таких как jQuery.
66 Глава 5. Обеспечение качества
Виды тестов
Разновидности тестов, которые мы будем обсуждать в этой книге, делятся на две обширные категории: модульное тестирование и интеграционное тестирование (я рассматриваю комплексное тестирование как подвид интеграционного тестирования). Модульное тестирование осуществляется на уровне очень мелких структурных единиц — это тестирование отдельных компонентов для проверки того, работают ли они должным образом, в то время как интеграционное тестирование тестирует взаимодействие многих компонентов или даже всей системы. В целом, модульное тестирование удобнее и лучше подходит для тестирования логики (хотя мы рассмотрим некоторые случаи, когда оно используется и для кода визуализации). Интеграционное тестирование пригодно для обеих областей.
Обзор методов QA
В этой книге для выполнения всестороннего тестирования мы будем использовать следующие методы и программное обеспечение.  Страничное тестирование. Страничное тестирование, как понятно из названия, тестирует визуализацию и функциональность страницы на стороне клиента. Может включать как модульное, так и интеграционное тестирование. Для этих целей мы будем использовать Moc�a.  Межстраничное тестирование. Межстраничное тестирование включает тестирование функциональности, требующей перехода с одной страницы на другую. Например, процесс подсчета стоимости покупок на сайте электронной коммерции обычно занимает несколько страниц. Поскольку этот вид тестирования, по существу, включает более одного компонента, он обычно считается интеграционным тестированием.  Логическое тестирование. Логическое тестирование будет реализовывать модульные и интеграционные тесты в логической области. При этом будет тестироваться только JavaScript вне связи с какой-либо функциональностью визуализации.  Линтинг. Линтинг1 относится не просто к обнаружению ошибок, а к обнаружению потенциальных ошибок. Общая концепция линтинга: нахождение участков, потенциально являющихся источником ошибок или нестабильных компонен
1 Это название происходит от Unix-утилиты �int — первоначально статического анализатора кода для языка программирования C, выполнявшего поиск подозрительных выражений или выражений, потенциально не переносимых на другие компиляторы/платформы. — Примеч. пер.
67Страничное тестирование
тов, которые могут привести к ошибкам в будущем. Для линтинга мы будем использовать JSHint.  Проверка ссылок. Проверка ссылок (с целью удостовериться в отсутствии битых ссылок на вашем сайте) попадает в категорию «проще пареной репы». В простом проекте она может показаться стрельбой из пушки по воробьям, но простые проекты имеют обыкновение становиться сложными, и битые ссылки точно появятся. Лучше с самого начала включить проверку ссылок в регулярный план по обеспечению качества. Проверка ссылок относится к категории модульного тестирования (ссылка или работающая, или нет). Мы будем использовать для этого LinkC�ecker.


Страничное тестирование
Мои рекомендации относительно страничного тестирования: всегда внедряйте тесты внутрь самой страницы. Преимущество этого метода: при работе над страницей вы сможете сразу заметить любые ошибки, просто загрузив ее в браузере. Выполнение этого потребует небольших настроек, так что приступим. Первое, что нам понадобится, — фреймворк тестирования. Мы будем использовать Moc�a. Добавим пакет в проект: npm install --save-dev mocha Обратите внимание на то, что мы использовали --save-dev вместо --save; этот флаг указывает npm занести данный пакет в список зависимостей, предназначенных для разработки, а не зависимостей, предназначенных для реального запуска. Это уменьшит количество имеющихся в проекте зависимостей при развертывании реальных экземпляров сайта.
68 Глава 5. Обеспечение качества
Поскольку мы будем запускать Moc�a в браузере, необходимо выложить его ресурсы в общедоступную папку, чтобы они могли быть выданы клиенту. Мы поместим их в подкаталог public/vendor: mkdir public/vendor cp node_modules/mocha/mocha.js public/vendor cp node_modules/mocha/mocha.css public/vendor


Неплохая идея — разместить используемые вами сторонние библиотеки в специальный каталог, такой как vendor. Так будет легче отделить код, который нужно будет тестировать и менять, от того, который трогать не следует. Тестам обычно требуется функция assert (или expect). Она доступна во фреймворке Node, но не внутри браузера, так что мы будем пользоваться библиотекой утверждений Chai: npm install --save-dev chai cp node_modules/chai/chai.js public/vendor


Теперь, когда у нас есть все нужные файлы, мы можем модифицировать сайт Meadow�ark Trave� для поддержки испытаний в рабочих условиях. Проблема в том, что мы не хотим, чтобы тесты выполнялись постоянно, не только из-за замедления работы сайта, но и потому, что пользователи-то не хотят видеть результаты тестов! Тесты должны быть отключены по умолчанию, но с возможностью очень удобной их активации. Чтобы достичь обеих этих целей, используем параметр URL для активации тестов. После этого переход на http://localhost:3000 будет загружать домашнюю страницу, а переход на http://localhost:3000?test=1 — домашнюю страницу вместе с тестами. Мы собираемся использовать промежуточное ПО для распознания test=1 в строке запроса. Оно должно находиться перед определениями любых маршрутов, в которых мы хотели бы его использовать: app.use(function(req, res, next){    res.locals.showTests = app.get('env') !== 'production' &&        req.query.test === '1';    next(); }); // Здесь находятся маршруты... 

